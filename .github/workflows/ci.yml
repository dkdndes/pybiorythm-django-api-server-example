name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_biorhythm
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Run ruff linting
      run: uv run ruff check .
    
    - name: Run ruff formatting check
      run: uv run ruff format --check .
    
    - name: Run bandit security scan
      run: uv run bandit -r biorhythm_api/ api/ --exclude "**/migrations/**"
    
    - name: Run safety dependency check
      run: uv run safety check
    
    - name: Run migrations
      run: uv run python manage.py migrate
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_biorhythm
        DJANGO_SETTINGS_MODULE: biorhythm_api.settings
    
    - name: Create test user and token
      run: |
        DJANGO_SUPERUSER_PASSWORD=testpass uv run python manage.py createsuperuser \
          --username testuser --email test@example.com --noinput
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_biorhythm
        DJANGO_SETTINGS_MODULE: biorhythm_api.settings
    
    - name: Run tests
      run: uv run python manage.py test
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_biorhythm
        DJANGO_SETTINGS_MODULE: biorhythm_api.settings
    
    - name: Test API endpoints
      run: |
        # Start server in background
        uv run daphne biorhythm_api.asgi:application -p 8001 &
        sleep 10
        
        # Test API endpoints
        curl -f http://localhost:8001/api/ || exit 1
        curl -f http://localhost:8001/admin/ || exit 1
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_biorhythm
        DJANGO_SETTINGS_MODULE: biorhythm_api.settings
    
    - name: Run coverage
      run: |
        uv run coverage run --source='.' manage.py test
        uv run coverage report --fail-under=80
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_biorhythm
        DJANGO_SETTINGS_MODULE: biorhythm_api.settings

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t pybiorythm-api-server .
    
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8001:8001 --name test-api pybiorythm-api-server
        sleep 15
        curl -f http://localhost:8001/api/ || exit 1
        docker stop test-api

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Run Django security checks
      run: uv run python manage.py check --deploy
    
    - name: Run bandit security scan
      run: uv run bandit -r biorhythm_api/ api/ --exclude "**/migrations/**"
    
    - name: Run safety dependency check
      run: uv run safety check